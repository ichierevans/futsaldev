name: Deploy Laravel ke VPS

on:
  push:
    branches: [ main ] # Trigger workflow ketika ada push ke branch 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest # Menggunakan runner GitHub Actions terbaru

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master # Menggunakan action SSH untuk koneksi ke VPS
        with:
          host: ${{ secrets.VPS_IP }} # IP VPS dari GitHub Secrets
          username: ${{ secrets.VPS_USER }} # Username SSH VPS dari GitHub Secrets
          key: ${{ secrets.VPS_SSH_KEY }} # SSH Private Key VPS dari GitHub Secrets
          script: |
            echo "📁 Masuk ke direktori proyek di host..."
            cd /var/www/futsaldev
            
            echo "🔄 Konfigurasi Git safe.directory di host..."
            # Jika error "dubious ownership" masih muncul untuk /var/www, Anda mungkin perlu menambahkan ini:
            # git config --global --add safe.directory /var/www
            git config --global --add safe.directory /var/www/futsaldev
            
            echo "🔄 Update kode dari branch main di host..."
            git fetch origin
            git reset --hard origin/main
            
            echo "🧹 Hentikan container lama..."
            docker compose down
            
            echo "⚙ Bangun dan jalankan container baru..."
            docker compose up -d --build
            
            echo "⏳ Tunggu MySQL siap di dalam container..."
            # Menunggu hingga container MySQL siap menerima koneksi
            docker exec laravel-app sh -c '
              max_tries=30
              counter=0
              until php -r "
                try {
                  # Mencoba koneksi PDO ke database MySQL
                  # Pastikan host, port, dbname, user, dan password sesuai dengan konfigurasi Docker Compose Anda
                  # Ini adalah pengecekan koneksi dari perspektif container laravel-app ke service 'db'
                  \$pdo = new PDO(
                    \"mysql:host=db;port=3306;dbname=futsal6\",
                    \"root\",
                    \"root\"
                  );
                  exit(0);
                } catch (PDOException \$e) {
                  exit(1);
                }
              " || [ $counter -eq $max_tries ]; do
                echo "Mencoba koneksi ke database... ($counter/$max_tries)"
                sleep 2
                counter=$((counter+1))
              done
              if [ $counter -eq $max_tries ]; then
                echo "❌ Timeout menunggu database"
                exit 1
              fi
            '
            
            echo "⚙ Atur permission direktori aplikasi utama di dalam container..."
            # Pastikan user www-data memiliki izin tulis ke direktori aplikasi utama di dalam container
            # Diasumsikan direktori aplikasi Laravel di dalam container adalah /var/www
            docker exec laravel-app chmod -R 775 /var/www
            docker exec laravel-app chown -R www-data:www-data /var/www
            
            echo "⚙ Atur permission storage dan bootstrap/cache di dalam container..."
            # Mengatur kepemilikan dan izin direktori storage dan bootstrap/cache di dalam container
            docker exec laravel-app chown -R www-data:www-data storage bootstrap/cache
            docker exec laravel-app chmod -R 775 storage bootstrap/cache
            
            echo "📄 Buat file .env jika belum ada dan pastikan konfigurasi DB benar di dalam container..."
            docker exec laravel-app sh -c '
              # Buat .env dari .env.example jika belum ada
              if [ ! -f .env ]; then
                cp .env.example .env
                echo ".env created from .env.example"
              else
                echo ".env already exists"
              fi
              
              # Pastikan file .env memiliki izin yang benar agar dapat ditulis oleh www-data
              chmod 664 .env
              chown www-data:www-data .env

              # Pastikan variabel koneksi database di .env sesuai dengan setup Docker Compose
              # Menggunakan sed untuk update atau append jika variabel tidak ada
              sed -i "/^DB_HOST=/c\DB_HOST=db" .env || echo "DB_HOST=db" >> .env
              sed -i "/^DB_PORT=/c\DB_PORT=3306" .env || echo "DB_PORT=3306" >> .env
              sed -i "/^DB_DATABASE=/c\DB_DATABASE=futsal6" .env || echo "DB_DATABASE=futsal6" >> .env
              sed -i "/^DB_USERNAME=/c\DB_USERNAME=root" .env || echo "DB_USERNAME=root" >> .env
              sed -i "/^DB_PASSWORD=/c\DB_PASSWORD=root" .env || echo "DB_PASSWORD=root" >> .env
            '
            
            echo "📦 Jalankan composer install di dalam container..."
            docker exec -u www-data laravel-app composer install --no-interaction --prefer-dist --optimize-autoloader
            
            echo "🔐 Generate APP key di dalam container..."
            docker exec -u www-data laravel-app php artisan key:generate --force
            
            echo "🧹 Bersihkan cache aplikasi di dalam container..."
            docker exec -u www-data laravel-app php artisan config:clear
            docker exec -u www-data laravel-app php artisan cache:clear
            
            echo "🗃 Migrasi dan seed database di dalam container..."
            # Menjalankan migrasi database di dalam container
            # PENTING: migrate:fresh akan MENGHAPUS SEMUA DATA di database Anda.
            # Untuk produksi, biasanya Anda hanya ingin 'php artisan migrate --force'
            # yang hanya menjalankan migrasi yang belum dijalankan.
            docker exec -u www-data laravel-app php artisan migrate --force --seed
            # Jika Anda memang ingin menghapus semua data dan me-reset database setiap kali deploy:
            # docker exec -u www-data laravel-app php artisan migrate:fresh --force --seed
            
            echo "✅ Deploy selesai!"
